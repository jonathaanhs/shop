// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	repository "github.com/learn/shop/repository"
	mock "github.com/stretchr/testify/mock"

	sqlx "github.com/jmoiron/sqlx"
)

// OrderRepository is an autogenerated mock type for the OrderRepository type
type OrderRepository struct {
	mock.Mock
}

// BeginTx provides a mock function with given fields:
func (_m *OrderRepository) BeginTx() (*sqlx.Tx, error) {
	ret := _m.Called()

	var r0 *sqlx.Tx
	if rf, ok := ret.Get(0).(func() *sqlx.Tx); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlx.Tx)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrder provides a mock function with given fields: tx, ctx, form
func (_m *OrderRepository) CreateOrder(tx *sqlx.Tx, ctx context.Context, form repository.Order) error {
	ret := _m.Called(tx, ctx, form)

	var r0 error
	if rf, ok := ret.Get(0).(func(*sqlx.Tx, context.Context, repository.Order) error); ok {
		r0 = rf(tx, ctx, form)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateOrderDetails provides a mock function with given fields: tx, ctx, form
func (_m *OrderRepository) CreateOrderDetails(tx *sqlx.Tx, ctx context.Context, form []repository.OrderDetail) error {
	ret := _m.Called(tx, ctx, form)

	var r0 error
	if rf, ok := ret.Get(0).(func(*sqlx.Tx, context.Context, []repository.OrderDetail) error); ok {
		r0 = rf(tx, ctx, form)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
