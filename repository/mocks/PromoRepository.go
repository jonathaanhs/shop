// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	repository "github.com/learn/shop/repository"
	mock "github.com/stretchr/testify/mock"
)

// PromoRepository is an autogenerated mock type for the PromoRepository type
type PromoRepository struct {
	mock.Mock
}

// GetAllPromo provides a mock function with given fields: ctx
func (_m *PromoRepository) GetAllPromo(ctx context.Context) ([]repository.Promo, error) {
	ret := _m.Called(ctx)

	var r0 []repository.Promo
	if rf, ok := ret.Get(0).(func(context.Context) []repository.Promo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.Promo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPromoByProductID provides a mock function with given fields: ctx, productID
func (_m *PromoRepository) GetPromoByProductID(ctx context.Context, productID int64) (repository.Promo, error) {
	ret := _m.Called(ctx, productID)

	var r0 repository.Promo
	if rf, ok := ret.Get(0).(func(context.Context, int64) repository.Promo); ok {
		r0 = rf(ctx, productID)
	} else {
		r0 = ret.Get(0).(repository.Promo)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
